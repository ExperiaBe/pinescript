{
	// Place your pinescript workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	// for reference: https://code.visualstudio.com/docs/editor/userdefinedsnippets
	//
	// Pinescript builtin variables:
	//
	"accdist" : {
		"scope": "pinescript",
		"prefix": "accdist",
		"body": ["accdist"],
		"description": "Accumulation/distribution index.\nType: float"
	},
	"adjustment.dividends" : {
		"scope": "pinescript",
		"prefix": "adjustment.dividends",
		"body": ["adjustment.dividends"],
		"description": "Constant for dividends adjustment type (dividends adjustment is applied).\nType: string"
	},
	"adjustment.none" : {
		"scope": "pinescript",
		"prefix": "adjustment.none",
		"body": ["adjustment.none"],
		"description": "Constant for none adjustment type (no adjustment is applied).\nType: string"
	},
	"adjustment.splits" : {
		"scope": "pinescript",
		"prefix": "adjustment.splits",
		"body": ["adjustment.splits"],
		"description": "Constant for splits adjustment type (splits adjustment is applied).\nType: string"
	},
	"bar_index" : {
		"scope": "pinescript",
		"prefix": "bar_index",
		"body": ["bar_index"],
		"description": "Current bar index. Numbering is zero-based, index of the first bar is 0.\nType: integer"
	},
	"barmerge.gaps_off" : {
		"scope": "pinescript",
		"prefix": "barmerge.gaps_off",
		"body": ["barmerge.gaps_off"],
		"description": "Merge strategy for requested data. Data is merged continuously without gaps, all the gaps are filled with the previous nearest existing value.\nType: bool"
	},
	"barmerge.gaps_on" : {
		"scope": "pinescript",
		"prefix": "barmerge.gaps_on",
		"body": ["barmerge.gaps_on"],
		"description": "Merge strategy for requested data. Data is merged with possible gaps (na values).\nType: bool"
	},
	"barmerge.lookahead_off" : {
		"scope": "pinescript",
		"prefix": "barmerge.lookahead_off",
		"body": ["barmerge.lookahead_off"],
		"description": "Merge strategy for the requested data position. Requested barset is merged with current barset in the order of sorting bars by their close time. This merge strategy disables effect of getting data from 'future' on calculation on history.\nType: bool"
	},
	"barmerge.lookahead_on" : {
		"scope": "pinescript",
		"prefix": "barmerge.lookahead_on",
		"body": ["barmerge.lookahead_on"],
		"description": "Merge strategy for the requested data position. Requested barset is merged with current barset in the order of sorting bars by their opening time. This merge strategy can lead to undesirable effect of getting data from 'future' on calculation on history. This is unacceptable in backtesting strategies, but can be useful in indicators.\nType: bool"
	},
	"barstate.isconfirmed" : {
		"scope": "pinescript",
		"prefix": "barstate.isconfirmed",
		"body": ["barstate.isconfirmed"],
		"description": "Returns true if the script is calculating the last (closing) update of the current bar. The next script calculation will be on the new bar data.\nType: bool"
	},
	"barstate.isfirst" : {
		"scope": "pinescript",
		"prefix": "barstate.isfirst",
		"body": ["barstate.isfirst"],
		"description": "Returns true if current bar is first bar in barset, false otherwise.\nType: bool"
	},
	"barstate.ishistory" : {
		"scope": "pinescript",
		"prefix": "barstate.ishistory",
		"body": ["barstate.ishistory"],
		"description": "Returns true if current bar is a historical bar, false otherwise.\nType: bool"
	},
	"barstate.islast" : {
		"scope": "pinescript",
		"prefix": "barstate.islast",
		"body": ["barstate.islast"],
		"description": "Returns true if current bar is the last bar in barset, false otherwise. This condition is true for all real-time bars in barset.\nType: bool"
	},
	"barstate.isnew" : {
		"scope": "pinescript",
		"prefix": "barstate.isnew",
		"body": ["barstate.isnew"],
		"description": "Returns true if script is currently calculating on new bar, false otherwise. This variable is true when calculating on historical bars or on first update of a newly generated real-time bar.\nType: bool"
	},
	"barstate.isrealtime" : {
		"scope": "pinescript",
		"prefix": "barstate.isrealtime",
		"body": ["barstate.isrealtime"],
		"description": "Returns true if current bar is a real-time bar, false otherwise.\nType: bool"
	},
	"close" : {
		"scope": "pinescript",
		"prefix": "close",
		"body": ["close"],
		"description": "Returns true if current bar is a real-time bar, false otherwise.\nType: bool"
	},
	"color.x" : {
		"scope": "pinescript",
		"prefix": "color.x",
		"body": ["color.${1|aqua,black,silver,gray,white,maroon,red,purple,fuchsia,green,lime,olive,yellow,navy,blue,teal,orange|}"],
		"description": "Is a named constant for a color.\nType: color"
	},
	"currency.x" : {
		"scope": "pinescript",
		"prefix": "currency.x",
		"body": ["currency.${1|AUD,CAD,CHF,EUR,GBP,HKD,JPY,NOK,NONE,NZD,RUB,SEK,SGD,TRY,USD,ZAR|}"],
		"description": "String representing a currency.\nType: string"
	},
	"dayofmonth" : {
		"scope": "pinescript",
		"prefix": "dayofmonth",
		"body": ["dayofmonth"],
		"description": "Date of current bar time in exchange timezone.\nType: integer"
	},
	"dayofweek" : {
		"scope": "pinescript",
		"prefix": "dayofweek",
		"body": ["dayofweek"],
		"description": "Day of week for current bar time in exchange timezone.\nType: integer"
	},
	"dayofweek.x" : {
		"scope": "pinescript",
		"prefix": "dayofweek.x",
		"body": ["dayofweek.${1|friday,monday,saturday,sunday,thursday,tuesday,wednesday|}"],
		"description": "Is a named constant for return value of dayofweek function and value of dayofweek variable.\nType: integer"
	},
	"display.x" : {
		"scope": "pinescript",
		"prefix": "display.x",
		"body": ["display.${1|all,none|}"],
		"description": "A named constant that specifies where the plot is displayed.\nType: integer"
	},
	"extend.x" : {
		"scope": "pinescript",
		"prefix": "extend.x",
		"body": ["extend.${1|both,left,none,right|}"],
		"description": "Named constant for line.new and line.set_extend functions.\nType: string"
	},
	"format.x" : {
		"scope": "pinescript",
		"prefix": "format.x",
		"body": ["format.${1|inherit,price,volume|}"],
		"description": "Named constant for selecting the formatting of the script output values.\nType: string"
	},
	"high" : {
		"scope": "pinescript",
		"prefix": "high",
		"body": ["high"],
		"description": "Current high price.\nType: float"
	},
	"hl2" : {
		"scope": "pinescript",
		"prefix": "hl2",
		"body": ["hl2"],
		"description": "Is a shortcut for (high + low)/2.\nType: float"
	},
	"hlc3" : {
		"scope": "pinescript",
		"prefix": "hlc3",
		"body": ["hlc3"],
		"description": "Is a shortcut for (high + low + close)/3.\nType: float"
	},
	"hline.x" : {
		"scope": "pinescript",
		"prefix": "hline.x",
		"body": ["hline.${1|style_dashed,style_dotted,style_solid|}"],
		"description": "Named constant for solid linestyle of hline function.\nType: integer"
	},
	"hour" : {
		"scope": "pinescript",
		"prefix": "hour",
		"body": ["hour"],
		"description": "Current bar hour in exchange timezone.\nType: integer"
	},
	"iii" : {
		"scope": "pinescript",
		"prefix": "iii",
		"body": ["iii"],
		"description": "Intraday Intensity Index.\nType: float"
	},
	"input.x" : {
		"scope": "pinescript",
		"prefix": "input.x",
		"body": ["input.${1|bool,float,integer,resolution,session,source,string,symbol|}"],
		"description": "Named constant for input type of input function.\nType: string"
	},
	"label.x" : {
		"scope": "pinescript",
		"prefix": "label.x",
		"body": ["label.${1|style_arrowdown,style_arrowup,style_circle,style_cross,style_diamond,style_flag,style_label_center,style_label_down,style_label_left,style_label_right,style_label_up,style_none,style_square,style_triangledown,style_triangleup,style_xcross|}"],
		"description": "Label style for label.new and label.set_style functions.\nType: string"
	},
	"line.x" : {
		"scope": "pinescript",
		"prefix": "line.x",
		"body": ["line.${1|style_arrow_both,style_arrow_left,style_arrow_right,style_dashed,style_dotted,style_solid|}"],
		"description": "Line style for line.new and line.set_style functions.\nType: string"
	},
	"location.x" : {
		"scope": "pinescript",
		"prefix": "location.x",
		"body": ["location.${1|abovebar,absolute,belowbar,bottom,top|}"],
		"description": "Location value for plotshape, plotchar functions.\nType: string"
	},
	"low" : {
		"scope": "pinescript",
		"prefix": "low",
		"body": ["low"],
		"description": "Current low price.\nType: float"
	},
	"minute" : {
		"scope": "pinescript",
		"prefix": "minute",
		"body": ["minute"],
		"description": "Current bar minute in exchange timezone.\nType: integer"
	},
	"month" : {
		"scope": "pinescript",
		"prefix": "month",
		"body": ["month"],
		"description": "Current bar month in exchange timezone.\nType: integer"
	},
	"na" : {
		"scope": "pinescript",
		"prefix": "na",
		"body": ["na"],
		"description": "Double. NaN value(Not a number).\nType: na"
	},
	"nvi" : {
		"scope": "pinescript",
		"prefix": "nvi",
		"body": ["nvi"],
		"description": "Negative Volume Index.\nType: float"
	},
	"obv" : {
		"scope": "pinescript",
		"prefix": "obv",
		"body": ["obv"],
		"description": "On Balance Volume.\nType: float"
	},
	"ohlc4" : {
		"scope": "pinescript",
		"prefix": "ohlc4",
		"body": ["ohlc4"],
		"description": "Is a shortcut for (open + high + low + close)/4.\nType: float"
	},
	"open" : {
		"scope": "pinescript",
		"prefix": "open",
		"body": ["open"],
		"description": "Current open price.\nType: float"
	},
	"plot.x" : {
		"scope": "pinescript",
		"prefix": "plot.x",
		"body": ["plot.${1|style_area,style_areabr,style_circles,style_columns,style_cross,style_histogram,style_line,style_linebr,style_stepline|}"],
		"description": "Named costant for plot() function property.\nType: string"
	},
	"pvi" : {
		"scope": "pinescript",
		"prefix": "pvi",
		"body": ["pvi"],
		"description": "Positive Volume Index.\nType: float"
	},
	"pvt" : {
		"scope": "pinescript",
		"prefix": "pvt",
		"body": ["pvt"],
		"description": "Price Volume Trend.\nType: float"
	},
	"scale.x" : {
		"scope": "pinescript",
		"prefix": "scale.x",
		"body": ["scale.${1|left,none,right|}"],
		"description": "Scale value for study() function.\nType: integer"
	},
	"second" : {
		"scope": "pinescript",
		"prefix": "second",
		"body": ["second"],
		"description": "Current bar second in exchange timezone.\nType: integer"
	},
	"session.x" : {
		"scope": "pinescript",
		"prefix": "session.x",
		"body": ["session.${1|extended,regular|}"],
		"description": "Constant for session type.\nType: string"
	},
	"shape.x" : {
		"scope": "pinescript",
		"prefix": "shape.x",
		"body": ["shape.${1|arrowdown,arrowup,circle,cross,diamond,flag,labeldown,labelup,square,triangledown,triangleup,xcross|}"],
		"description": "Shape style for plotshape() function.\nType: string"
	},
	"size.x" : {
		"scope": "pinescript",
		"prefix": "size.x",
		"body": ["size.${1|auto,huge,large,normal,small,tiny|}"],
		"description": "Size value for plotshape() function.\nType: string"
	},
	"strategy.x" : {
		"scope": "pinescript",
		"prefix": "strategy.x",
		"body": ["strategy.${1|cash,closedtrades,comission.cash_per_contract,comission.cash_per_order,comission.percent,direction.all,direction.long,direction.short,equity,eventrades,fixed,grossloss,grossprofit,initial_capital,long,losstrades,max_contracts_held_all,max_contracts_held_long,max_contracts_held_short,max_drawdown,netprofit,oca.cancel,oca.none,oca.reduce,openprofit,opentrades,percent_of_equity,position_avg_price,position_entry_name,position_size,short,wintrades|}"],
		"description": "Size value for plotshape() function.\nType: string"
	},
	"syminfo.x" : {
		"scope": "pinescript",
		"prefix": "syminfo.x",
		"body": ["syminfo.${1|currency,description,mintick,pointvalue,prefix,root,session,ticker,tickerid,timezone,type|}"],
		"description": "Properties of the underlying asset.\nType: ---"
	},
	"text.x" : {
		"scope": "pinescript",
		"prefix": "text.x",
		"body": ["text.${1|align_center,align_left,align_right|}"],
		"description": "Label text alignment for label.new() function.\nType: string"
	},
	"time" : {
		"scope": "pinescript",
		"prefix": "time",
		"body": ["time"],
		"description": "Current bar time in UNIX format.\nType: integer"
	},
	"time_close" : {
		"scope": "pinescript",
		"prefix": "time_close",
		"body": ["time_close"],
		"description": "Current bar close time in UNIX format.\nType: integer"
	},
	"timeframe.x" : {
		"scope": "pinescript",
		"prefix": "timeframe.x",
		"body": ["timeframe.${1|isdaily,isdwm,isintraday,isminutes,ismonthly,isseconds,isweekly,multiplier,period|}"],
		"description": "Properties of timeframe.\nType: ---"
	},
	"timenow" : {
		"scope": "pinescript",
		"prefix": "timenow",
		"body": ["timenow"],
		"description": "Current time in UNIX format.\nType: integer"
	},
	"tr" : {
		"scope": "pinescript",
		"prefix": "tr",
		"body": ["tr"],
		"description": "True range. Same as tr(false). It is max(high - low, abs(high - close[1]), abs(low - close[1])).\nType: float"
	},
	"volume" : {
		"scope": "pinescript",
		"prefix": "volume",
		"body": ["volume"],
		"description": "Current bar volume.\nType: float"
	},
	"vwap" : {
		"scope": "pinescript",
		"prefix": "vwap",
		"body": ["vwap"],
		"description": "Volume-weighted average price. It uses hlc3 as source.\nType: float"
	},
	"wad" : {
		"scope": "pinescript",
		"prefix": "wad",
		"body": ["wad"],
		"description": "Williams Accumulation/Distribution.\nType: float"
	},
	"weekofyear" : {
		"scope": "pinescript",
		"prefix": "weekofyear",
		"body": ["weekofyear"],
		"description": "Week number of current bar time in exchange timezone.\nType: integer"
	},
	"wvad" : {
		"scope": "pinescript",
		"prefix": "wvad",
		"body": ["wvad"],
		"description": "Williams Variable Accumulation/Distribution.\nType: float"
	},
	"xloc.x" : {
		"scope": "pinescript",
		"prefix": "xloc.x",
		"body": ["xloc.${1|bar_index,bar_time|}"],
		"description": "A named constant that specifies the algorithm of interpretation of x-value in functions line.new and label.new.\nType: string"
	},
	"year" : {
		"scope": "pinescript",
		"prefix": "year",
		"body": ["year"],
		"description": "Current bar year in exchange timezone.\nType: integer"
	},
	"yloc.x" : {
		"scope": "pinescript",
		"prefix": "yloc.x",
		"body": ["yloc.${1|abovebar,belowbar,price|}"],
		"description": "A named constant that specifies the algorithm of interpretation of y-value in function label.new.\nType: string"
	},
	//
	// builtin functions:
	"abs()" : {
		"scope": "pinescript",
		"prefix": "abs()",
		"body": ["abs($0)"],
		"description": "Absolute value of input value."
	},
	"acos()" : {
		"scope": "pinescript",
		"prefix": "acos()",
		"body": ["acos($0)"],
		"description": "The acos function returns the arccosine (in radians) of number such that cos(acos(y)) = y for y in range [-1, 1]."
	},
	"alertcondition()" : {
		"scope": "pinescript",
		"prefix": "alertcondition()",
		"body": ["alertcondition(condition=${1}, title='${2}', message='${3}')", "${0}"],
		"description": "Creates alert condition, that is available in Create Alert dialog. Please note, that alertcondition does NOT create an alert, it just gives you more options in Create Alert dialog. Also, alertcondition effect is invisible on chart."
	},
	"alma()" : {
		"scope": "pinescript",
		"prefix": "alma()",
		"body": ["alma(series=${1}, length=${2}, offset=${3}, sigma=${4})${0}"],
		"description": "Arnaud Legoux Moving Average. It uses Gaussian distribution as weights for moving average."
	},
	"asin()" : {
		"scope": "pinescript",
		"prefix": "asin()",
		"body": ["asin($0)"],
		"description": "The asin function returns the arcsine (in radians) of number such that sin(asin(y)) = y for y in range [-1, 1]."
	},
	"atan()" : {
		"scope": "pinescript",
		"prefix": "atan()",
		"body": ["atan($0)"],
		"description": "The atan function returns the arctangent (in radians) of number such that tan(atan(y)) = y for any y."
	},
	"atr()" : {
		"scope": "pinescript",
		"prefix": "atr()",
		"body": ["atr(length=$0)"],
		"description": "Function atr (average true range) returns the RMA of true range. True range is max(high - low, abs(high - close[1]), abs(low - close[1]))"
	},
	"avg()" : {
		"scope": "pinescript",
		"prefix": "avg()",
		"body": ["avg($0)"],
		"description": "Calculates average of all given series (elementwise)."
	},
	//
	// custom functions:
	"f_color_palette_black_to_white" : {
		"scope": "pinescript",
		"prefix": "f_color_palette_black_to_white",
		"body": [
			"// Black to White color palette.",
			"// 41 color palette, index 0 to 40.",
			"f_color_palette_black_to_white(_i)=>_i==0?#000000:(_i==1?#0d0d0d:(_i==2?#1a1a1a:(_i==3?#262626:(_i==4?#333333:(_i==5?#404040:(_i==6?#4d4d4d:(_i==7?#595959:(_i==8?#696969:(_i==9?#737373:(_i==10?#808080:(_i==11?#8d8d8d:(_i==12?#999999:(_i==13?#a6a6a6:(_i==14?#b3b3b3:(_i==15?#bfbfbf:(_i==16?#cccccc:(_i==17?#d9d9d9:(_i==18?#e6e6e6:(_i==19?#f2f2f2:#ffffff)))))))))))))))))))",
			"//."
		],
		"description": "Black to White color palette with 41 colors."
	},
	"if else" : {
		"scope": "pinescript",
		"prefix": "if else statement",
		"body": [
			"if ${1:true}",
			"\t//do something",
			"\t$0",
			"else",
			"\t//do something else"
		],
		"description": "conditional if () else () statement"
	},
	"for loop" : {
		"scope": "pinescript",
		"prefix": "for loop statement",
		"body": [
			"for _i = 0 to 999 by 1",
			"    if true",
			"        //do something",
			"        break",
			"    else",
			"        //do something",
			"        continue"
		],
		"description": "for ()() loop statement"
	}
	
}