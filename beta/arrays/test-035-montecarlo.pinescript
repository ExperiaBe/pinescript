// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© RicardoSantos

//@version=4
study("test-034-montecarlo")

//| -------------------------------------------------------------------------------|
var float[] seed = array.new_float(size=1, initial_value=42.0)                  //-|
f_prng(_range)=>                                                              //---|
//| pseudo random function:                                                 // O O |
    var float _return = 1.0                                                 //- V -|
    float _seed = array.get(id=seed, index=0)                                //NNNN|
    float _reseed =  271.828                                                  // A |
    _return := ((3.1416 * _return % _seed) * _reseed) % _range                // V |
    array.set(id=seed, index=0, value=(1 + (_seed * 1.618) % _range) + _return) //||
    _return                                                                    // ||
//| -------------------------------------------------------------------------------|


f_decision_tree(_node_weights, _depth)=>
    int[] _path = array.new_int(size=0, initial_value=0)
    int _nweights = array.size(id=_node_weights)
    int _sumweights = ceil(array.sum(id=_node_weights))
    if _nweights > 0 and _depth > 0 and _sumweights == 1
        for _d = 1 to _depth
            for _w = 0 to _nweights - 1
                float _rng = f_prng(1.0)
                float _weight = array.get(id=_node_weights, index=_w)
                if _weight >= _rng or _w == (_nweights - 1)
                    array.push(id=_path, value=_w)
                    break
    _path

var float[] node_weights = array.new_float(size=0, initial_value=0)
if barstate.isfirst
    array.push(id=node_weights, value=0.25)
    array.push(id=node_weights, value=0.4)
    array.push(id=node_weights, value=0.35)

int depth = input(10)
int simulations = input(10)

var float[] distribution_max = array.new_float(size=depth, initial_value=0.)
var float[] distribution_min = array.new_float(size=0, initial_value=0.)
var float[] distribution_std_upper = array.new_float(size=0, initial_value=0.)
var float[] distribution_std_lower = array.new_float(size=0, initial_value=0.)
var float[] distribution_mean = array.new_float(size=0, initial_value=0.)

var float[] distributions = array.new_float(size=0, initial_value=0.)

if barstate.islast
    for _s = 0 to simulations-1
        _path = f_decision_tree(node_weights, depth)
        for _d = 0 to depth-1
            for _w = 0 to array.size(id=node_weights) - 1
                int _v = array.get(id=_path, index=_d)
                if _v == _w
                    array.push(id=distributions, value=_w)
                else
                    array.push(id=distributions, value=na)
    // analize the distribution data:
    // sugestions on how to read the distributions onwards into:
    // decision distributions stats per depth step?
    // decision cones over chart?
    // best fit path?
    for _d = 0 to depth-1
        _a = 0
        for _step = 0 to array.size(id=distributions) by depth * array.size(id=node_weights)
            float _v = array.get(id=distributions, index=_d)
    

t = ''
t := t + '\n' + tostring(distributions)

var label la = label.new(bar_index, 0.0, '')
label.set_xy(id=la, x=bar_index, y=0.0)
label.set_text(id=la, text=t)